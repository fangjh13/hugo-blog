<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Fython&#39;s Blog</title>
    <link>https://blog.fangjiahui.me/tags/go/</link>
    <description>Recent content in Go on Fython&#39;s Blog</description>
    <image>
      <title>Fython&#39;s Blog</title>
      <url>https://blog.fangjiahui.me/blog-cover-1.png</url>
      <link>https://blog.fangjiahui.me/blog-cover-1.png</link>
    </image>
    <generator>Hugo -- 0.140.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Dec 2022 10:56:43 +0800</lastBuildDate>
    <atom:link href="https://blog.fangjiahui.me/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 服务性能分析 pprof 的使用</title>
      <link>https://blog.fangjiahui.me/posts/2022-12-16-go-tool-pprof-tutorial/</link>
      <pubDate>Fri, 16 Dec 2022 10:51:46 +0800</pubDate>
      <guid>https://blog.fangjiahui.me/posts/2022-12-16-go-tool-pprof-tutorial/</guid>
      <description>go tool pprof 教程</description>
    </item>
    <item>
      <title>Go 中的类型和比较</title>
      <link>https://blog.fangjiahui.me/posts/2022-05-29-go-types-and-comparisons/</link>
      <pubDate>Sun, 29 May 2022 13:53:54 +0800</pubDate>
      <guid>https://blog.fangjiahui.me/posts/2022-05-29-go-types-and-comparisons/</guid>
      <description>golang 中的类型和它们的比较规则</description>
    </item>
    <item>
      <title> Go 中的 Arrays 和 Slices</title>
      <link>https://blog.fangjiahui.me/posts/2021-04-08-go-arrays-and-slices/</link>
      <pubDate>Thu, 08 Apr 2021 03:17:59 +0800</pubDate>
      <guid>https://blog.fangjiahui.me/posts/2021-04-08-go-arrays-and-slices/</guid>
      <description>&lt;h1 id=&#34;golang-中的-arrays-和-slices&#34;&gt;Golang 中的 Arrays 和 Slices&lt;/h1&gt;
&lt;p&gt;在 go 语言中，我们经常使用&lt;code&gt;Slices&lt;/code&gt;类型因为它的方便和灵活，它和另一个&lt;code&gt;Arrays&lt;/code&gt;类型有着密切的关系，Slices 是建立在 Arrays 的基础上的，搞明白它们的原理能使我们更加的轻松的使用它们&lt;/p&gt;
&lt;h2 id=&#34;arrays&#34;&gt;Arrays&lt;/h2&gt;
&lt;p&gt;Arrays 和别的语言(C、Java)的类型一样，&lt;strong&gt;有固定的长度&lt;/strong&gt;，在内存里是一块连续的空间，用以存储相同类型的 types。用如下方式申明&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;像&lt;code&gt;[size]T&lt;/code&gt;在 go 中申明&lt;code&gt;array&lt;/code&gt;，size 是 type 的一部分 如上面的&lt;code&gt;[5]int&lt;/code&gt;代表 5 个 int 元素的 Arrays，和另一个如&lt;code&gt;[10]int&lt;/code&gt;是不同的类型，Arrays 有确定的长度。并且申明之后带默认值(各类型的零值)。也可以使用&lt;code&gt;[...]&lt;/code&gt;符号省略 size 申明，编译器自动计算 如&lt;code&gt;array := [...]int{1, 2, 3, 4, 5}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变量&lt;code&gt;array&lt;/code&gt;引用的是整个 Array 而不是 Array 的第一个元素，如果将一个数组另外赋值是将这个数组拷贝了一份，数组作为函数参数也是将整个数组拷贝一份，非引用数组的指针&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;slices&#34;&gt;Slices&lt;/h2&gt;
&lt;p&gt;就是因为 Arrays 比较难用，go 在此基础上建立了 Slices，它是可以&lt;strong&gt;动态调整长度(dynamically-sized)的描述 Arrays 一部分的 types&lt;/strong&gt;，Slices 可以使用切片数组的方式得到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Arrays
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// same as `var slice []int = array[1:4]`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// [2 3 4]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// [2 9 4]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// [2 9 4 5]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// [1 2 9 4 5]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Slices 的底层指向的是 Arrays，&lt;strong&gt;它描述底层一部分的 Arrays&lt;/strong&gt;，如果被引用的 array 变化了，引用它的所有 slice 都会随之变化&lt;/li&gt;
&lt;li&gt;Slices 有长度(l&lt;em&gt;ength&lt;/em&gt;)和容量(&lt;em&gt;capacity&lt;/em&gt;)，分别通过&lt;code&gt;len&lt;/code&gt;和&lt;code&gt;cap&lt;/code&gt;获取，长度就是切片的长度，&lt;strong&gt;容量是从 slice 的第一个元素到底层引用的 Arrays 的末尾元素的个数&lt;/strong&gt;，也就是这个 slices 最大能达到的长度，例如上面的 slice 从第二个元素&lt;code&gt;2&lt;/code&gt;到引用底层 array 末尾的元素&lt;code&gt;5&lt;/code&gt;所以 cap 等于 4，所以 slices 可以动态调整但不能大于它的容量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将整个 Arrays 转化成 Slices 可以忽略前后索引&lt;code&gt;slice := array[:]&lt;/code&gt;。Slices 以&lt;code&gt;[]T&lt;/code&gt;的形式申明&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
