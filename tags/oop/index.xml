<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OOP on Fython&#39;s Blog</title>
    <link>https://blog.fangjiahui.me/tags/oop/</link>
    <description>Recent content in OOP on Fython&#39;s Blog</description>
    <image>
      <title>Fython&#39;s Blog</title>
      <url>https://blog.fangjiahui.me/blog-cover-1.png</url>
      <link>https://blog.fangjiahui.me/blog-cover-1.png</link>
    </image>
    <generator>Hugo -- 0.140.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 09 Jul 2020 06:13:54 +0800</lastBuildDate>
    <atom:link href="https://blog.fangjiahui.me/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UML 类图</title>
      <link>https://blog.fangjiahui.me/posts/2020-07-09-uml-class-diagram/</link>
      <pubDate>Thu, 09 Jul 2020 06:10:47 +0800</pubDate>
      <guid>https://blog.fangjiahui.me/posts/2020-07-09-uml-class-diagram/</guid>
      <description>&lt;h1 id=&#34;uml-类图&#34;&gt;UML 类图&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;统一建模语言（英语：Unified Modeling Language，缩写 UML）是非专利的第三代建模和规约语言。UML是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是维基百科上对UML的定义，它定义了很多的图，本文主要介绍类图，是属于结构性图形中的静态图，本文所有图是通过OmniGraffle画的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结构性图形&lt;/strong&gt;（Structure diagrams）强调的是系统式的建模：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态图（static diagram）
&lt;ul&gt;
&lt;li&gt;类图&lt;/li&gt;
&lt;li&gt;对象图&lt;/li&gt;
&lt;li&gt;包图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现图（implementation diagram）
&lt;ul&gt;
&lt;li&gt;组件图&lt;/li&gt;
&lt;li&gt;部署图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剖面图&lt;/li&gt;
&lt;li&gt;复合结构图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;行为式图形&lt;/strong&gt;（Behavior diagrams）强调系统模型中触发的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活动图&lt;/li&gt;
&lt;li&gt;状态图&lt;/li&gt;
&lt;li&gt;用例图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;交互性图形&lt;/strong&gt;（Interaction diagrams），属于行为图形的子集合，强调系统模型中的资料流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信图&lt;/li&gt;
&lt;li&gt;交互概述图（UML 2.0）&lt;/li&gt;
&lt;li&gt;时序图（UML 2.0）&lt;/li&gt;
&lt;li&gt;时间图（UML 2.0）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;UML类图是描述类的内部结构（属性, 方法等）和类与类之间的关系（泛化, 实现，组合, 聚合，关联，依赖），是一种静态结构图。是在面向对象程序设计中建模的常用方法，不仅是系统编码和测试的重要模型，以图的形式展示还可以简化人们对系统的理解。&lt;/p&gt;
&lt;h2 id=&#34;格式&#34;&gt;格式&lt;/h2&gt;
&lt;p&gt;一般是用三层矩形框表示，第一层表示类的名称，第二层表示的是字段和属性，第三层则是类的方法，如果某一层没有则可以省略。第一层中，如果是&lt;strong&gt;抽象类&lt;/strong&gt;，名称需用&lt;em&gt;斜体&lt;/em&gt;显示。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;class&#34; loading=&#34;lazy&#34; src=&#34;../images/20200708115611873_1519558387.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;属性和方法前面的符号（+、#、-等）代表可见性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Public(&lt;code&gt;+&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Protected(&lt;code&gt;#&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Private(&lt;code&gt;-&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Package(&lt;code&gt;~&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二层属性的格式是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可见性 名称 : 类型 [= 默认值]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第三层方法的格式是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可见性 名称(参数类型 参数, &amp;hellip;) : 返回类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;类与类之间的关系&#34;&gt;类与类之间的关系&lt;/h2&gt;
&lt;p&gt;类图中类与类之间的关系主要由：继承、实现、依赖、关联、聚合、组合这六大类型。表示方式如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;relation&#34; loading=&#34;lazy&#34; src=&#34;../images/20200708115205255_1705085089.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;泛化generalizationextens&#34;&gt;泛化（generalization/extens）&lt;/h3&gt;
&lt;p&gt;泛化又称继承，是IS-A的关系，两个对象之间如果可以用IS-A来表示，就是继承关系：（..是..)&lt;/p&gt;
&lt;p&gt;泛化关系用一条带空心箭头的实线表示；如下图表示（猫继承自动物）猫是（IS-A）动物&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;generalization&#34; loading=&#34;lazy&#34; src=&#34;../images/20200708154854835_905887702.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;实现realizationimplements&#34;&gt;实现（realization/implements)&lt;/h3&gt;
&lt;p&gt;实现关系指的是一个class类实现interface接口（可以是多个）的功能，在Java中可以直接用关键字&lt;code&gt;implements&lt;/code&gt;表示，在C++中目标类可用抽象类表示&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
